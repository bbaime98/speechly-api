[{"F:\\github\\speechly-api\\src\\components\\Details\\Details.jsx":"1","F:\\github\\speechly-api\\src\\useTransactions.js":"2","F:\\github\\speechly-api\\src\\context\\context.js":"3","F:\\github\\speechly-api\\src\\context\\contextReducer.js":"4","F:\\github\\speechly-api\\src\\components\\Details\\styles.js":"5","F:\\github\\speechly-api\\src\\components\\Main\\List\\List.jsx":"6","F:\\github\\speechly-api\\src\\components\\Main\\List\\styles.js":"7","F:\\github\\speechly-api\\src\\utils\\formatDate.js":"8","F:\\github\\speechly-api\\src\\App.js":"9","F:\\github\\speechly-api\\src\\components\\Main\\Main.jsx":"10","F:\\github\\speechly-api\\src\\components\\Main\\Form\\Form.jsx":"11"},{"size":725,"mtime":1610498727230,"results":"12","hashOfConfig":"13"},{"size":1124,"mtime":1610498727230,"results":"14","hashOfConfig":"13"},{"size":2034,"mtime":1610748670172,"results":"15","hashOfConfig":"13"},{"size":585,"mtime":1610747928250,"results":"16","hashOfConfig":"13"},{"size":247,"mtime":1610477539959,"results":"17","hashOfConfig":"13"},{"size":1396,"mtime":1610494753197,"results":"18","hashOfConfig":"13"},{"size":416,"mtime":1610487262895,"results":"19","hashOfConfig":"13"},{"size":301,"mtime":1610496510720,"results":"20","hashOfConfig":"13"},{"size":1065,"mtime":1610746594310,"results":"21","hashOfConfig":"13"},{"size":1077,"mtime":1610487262896,"results":"22","hashOfConfig":"13"},{"size":4309,"mtime":1610747479045,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s6k1s9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"F:\\github\\speechly-api\\src\\components\\Details\\Details.jsx",[],"F:\\github\\speechly-api\\src\\useTransactions.js",[],"F:\\github\\speechly-api\\src\\context\\context.js",[],"F:\\github\\speechly-api\\src\\context\\contextReducer.js",[],"F:\\github\\speechly-api\\src\\components\\Details\\styles.js",[],["50","51"],"F:\\github\\speechly-api\\src\\components\\Main\\List\\List.jsx",[],"F:\\github\\speechly-api\\src\\components\\Main\\List\\styles.js",[],"F:\\github\\speechly-api\\src\\utils\\formatDate.js",["52"],"export default (date) => {\r\n  const d = new Date(date);\r\n  let month = `${d.getMonth() + 1}`;\r\n  let day = `${d.getDate()}`;\r\n  const year = d.getFullYear();\r\n\r\n  if (month.length < 2) { month = `0${month}`; }\r\n  if (day.length < 2) { day = `0${day}`; }\r\n\r\n  return [year, month, day].join('-');\r\n};\r\n","F:\\github\\speechly-api\\src\\App.js",[],"F:\\github\\speechly-api\\src\\components\\Main\\Main.jsx",["53"],"import React from 'react';\r\nimport { Card, CardHeader, CardContent, Typography, Grid, Divider } from '@material-ui/core';\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport Form from './Form/Form';\r\nimport List from './List/List';\r\n\r\nimport useStyles from './styles';\r\nconst ExpenseTracker = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader title=\"Expense Tracker\" subheader=\"Powered by Speechly\" />\r\n      <CardContent>\r\n        <Typography align=\"center\" variant=\"h5\">Total Balance $100</Typography>\r\n        <Typography variant=\"subtitle1\" style={{ lineHeight: '1.5em', marginTop: '20px' }}>\r\n          {/* <InfoCard /> */}\r\n        </Typography>\r\n        <Divider className={classes.divider} />\r\n        <Form />\r\n      </CardContent>\r\n      <CardContent className={classes.cartContent}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <List />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ExpenseTracker;\r\n","F:\\github\\speechly-api\\src\\components\\Main\\Form\\Form.jsx",["54"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport useStyles from './styles';\r\n\r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatDate(new Date()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const { segment } = useSpeechContext();\r\n  const createTransaction = () => {\r\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\r\n    setFormData(initialState);\r\n  }\r\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n\r\n  useEffect(() => {\r\n    if (segment) {\r\n      if (segment.intent.intent === 'add_expense') {\r\n        setFormData({ ...formData, type: 'Expense' });\r\n      } else if (segment.intent.intent === 'add_income') {\r\n        setFormData({ ...formData, type: 'Income' });\r\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n        return createTransaction();\r\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') { \r\n        return setFormData(initialState);\r\n      }\r\n\r\n      segment.entities.forEach((s) => {\r\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\r\n\r\n        switch (s.type) {\r\n          case 'amount':\r\n            setFormData({ ...formData, amount: s.value });\r\n            break;\r\n          case 'category':\r\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Income', category });\r\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Expense', category });\r\n            }\r\n            break;\r\n          case 'date':\r\n            setFormData({ ...formData, date: s.value });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n        createTransaction();\r\n      }\r\n    }\r\n  }, [segment]);\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n        {segment ? (\r\n        <>\r\n          {segment.words.map((w) => w.value).join(\" \")}\r\n        </>\r\n      ) : null}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n          {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={6}>\r\n        <TextField type=\"number\" label=\"Amount\"  fullWidth value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField fullWidth label=\"Date\" type=\"date\"  value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\r\n      </Grid>\r\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth \r\n      onClick={createTransaction}\r\n      >Create</Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":1,"nodeType":"61","endLine":11,"endColumn":3},{"ruleId":"62","severity":1,"message":"63","line":3,"column":10,"nodeType":"64","messageId":"65","endLine":3,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":66,"column":6,"nodeType":"68","endLine":66,"endColumn":15,"suggestions":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useSpeechContext' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["72"],"no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"75","text":"76"},[2610,2619],"[createTransaction, formData, segment]"]